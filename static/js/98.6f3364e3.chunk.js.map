{"version":3,"file":"static/js/98.6f3364e3.chunk.js","mappings":"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","sources":["webpack://project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://project/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://project/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPost.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__i9pS3\",\"mainPhoto\":\"ProfileInfo_mainPhoto__tOYtq\",\"contact\":\"ProfileInfo_contact__200tU\",\"job\":\"ProfileInfo_job__CqQfx\"};","import React, { ChangeEvent, useEffect, useState } from 'react'\r\n\r\ntype PropsType = {\r\n  status: string,\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect ( () => {\r\n      setStatus(props.status)\r\n    },[props.status] )\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n  return (\r\n      <div>\r\n        {!editMode &&\r\n          <div>\r\n             <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n          </div>\r\n        }\r\n        {editMode &&\r\n          <div>\r\n              <input onChange={onStatusChange} autoFocus ={true} onBlur={deactivateEditMode} value={status} />\r\n          </div>\r\n        }\r\n      </div>\r\n  )\r\n  }\r\nexport default ProfileStatusWithHooks","import React from \"react\"\r\nimport { createField,GetStringKeys,Input, Textarea } from \"../../Common/FormsControls/FormControls\"\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport s from './ProfileInfo.module.css'\r\nimport style from\"../../Common/FormsControls/FormsControls.module.css\"\r\nimport { ProfileType } from \"../../../types/types\"\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit,profile,error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n       <div><button>save</button></div>\r\n       {error && <div className={style.formSummeryError}>\r\n          {error}\r\n        </div>}\r\n    <div>\r\n      <b>Full name</b>: { createField<ProfileTypeKeys>(\"Full name\",\"fullName\",[],Input)}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\",\"lookingForAJob\",[],Input,{type:\"checkbox\"})}\r\n    </div>\r\n      <div>\r\n        <b>My professional skills</b>:\r\n        {createField<ProfileTypeKeys>(\"My professional skills\",\"lookingForAJobDescription\",[],Textarea)}\r\n      </div>\r\n    <div>\r\n      <b>About me</b>: \r\n      {createField<ProfileTypeKeys>(\"About me\",\"aboutMe\",[],Textarea)}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <div key={key} className={s.contact}>\r\n          <b>{key}: { createField(key,\"contacts.\" + key,[],Input)}</b>\r\n        </div>\r\n      })}\r\n    </div>\r\n    </form>\r\n  }\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form:\"edit-profile\"})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm","import React, { ChangeEvent, useState } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\"\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null,\r\n  status: string,\r\n  updateStatus: (status: string) => void,\r\n  isOwner: boolean,\r\n  savePhoto: (file: File) => void,\r\n  saveProfile:(profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile,status,updateStatus,isOwner,savePhoto,saveProfile}) => {\r\n\r\n  let [editMode,setEditMode] = useState(false)\r\n  if(!profile){\r\n    return <Preloader />\r\n  }\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if(e.target.files?.length){\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n  const onSubmit = (formData: ProfileType) => {\r\n    // todo: remove then\r\n    saveProfile(formData).then(() => {\r\n    setEditMode(false)\r\n    })\r\n  }\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n        {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n        <ProfileStatusWithHooks status = {status} updateStatus = {updateStatus}/>\r\n        {editMode \r\n        ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n        : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner}/>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType,\r\n  isOwner: boolean,\r\n  goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile,isOwner,goToEditMode }) => {\r\n  return <div>\r\n    {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n    <div>\r\n      <b>Full name</b>: {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: {profile.lookingForAJob ? <img className={s.job} src='https://glaza.info/uploads/posts/2020-11/1604564156_ischu-rabotu.jpg'/> : <img className={s.job} src='https://risovach.ru/upload/2016/02/mem/uzbagoyzya_106745465_orig_.jpg'/>}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n      <div>\r\n        <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n      </div>\r\n    }\r\n    <div>\r\n      <b>About me</b>: {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n      })}\r\n    </div>\r\n  </div>\r\n}\r\ntype ContactsPropsType = {\r\n  contactTitle: string,\r\n  contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle,contactValue}) => {\r\n  return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__SlZS+\",\"posts\":\"MyPosts_posts__begmm\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__X1A2q\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n  message: string,\r\n  likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://cdn.landesa.org/wp-content/uploads/default-user-image.png' />\r\n      {props.message}\r\n      <div>\r\n      <span>\r\n        like {props.likesCount}\r\n      </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post","import { Field, InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { GetStringKeys, Input, Textarea, createField } from \"../../../Common/FormsControls/FormControls\"\r\nimport React from \"react\"\r\nimport { required } from \"../../../../utils/validator/validators\"\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                { createField<AddPostFormValuesTypeKeys>(\"Your post\", 'newPostText', [required], Textarea) }\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </form>\r\n    )\r\n\r\n}\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: \"ProfileAddNewPostForm\"})(AddPostForm)","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport AddPostForm, { AddPostFormValuesType } from './AddPostForm/AddPostForm';\r\nimport { PostType } from '../../../types/types';\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>,\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n      }\r\n      \r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\nexport default MyPostsMemorized","import {actions} from '../../../redux/profileReducer';\r\nimport { AppStateType } from '../../../redux/reduxStore';\r\nimport MyPosts, { DispatchPropsType, MapPropsType } from './MyPost';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n}\r\n\r\nlet MyPostsContainer = connect<MapPropsType,DispatchPropsType,{},AppStateType>(mapStateToProps,{\r\n  addPost: actions.addPostActionCreator\r\n})(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null,\r\n  status: string,\r\n  updateStatus: (status: string) => void,\r\n  isOwner: boolean,\r\n  savePhoto: (file: File) => void,\r\n  saveProfile:(profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo isOwner={props.isOwner} profile = {props.profile} status = {props.status} updateStatus = {props.updateStatus} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile,getStatus,updateStatus,savePhoto,saveProfile } from '../../redux/profileReducer';\r\nimport {\r\n    Navigate,\r\n    useLocation,\r\n    useNavigate,\r\n    useParams,\r\n} from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void,\r\n    getStatus: (userId: number) => void,\r\n    updateStatus: (status: string) => void,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: ProfileType) => Promise<any>,\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n    router: any\r\n} \r\ntype PropsType = MapPropsType & DispatchPropsType & PathParamsType\r\n\r\ntype LocalStateType = { isShowMyProfile: boolean }\r\n\r\nclass ProfileContainer extends React.Component<PropsType, LocalStateType> {\r\n   constructor(props: PropsType) {\r\n      super(props)\r\n      this.state = {\r\n         isShowMyProfile: true\r\n      }\r\n   }\r\n\r\n\r\n   componentDidMount() {\r\n\r\n      let userIdFromPath = +this.props.router.params.userId\r\n      let authorisedUserId = this.props.authorisedUserId\r\n\r\n      if (userIdFromPath) {\r\n         this.props.getUserProfile(userIdFromPath)\r\n         this.props.getStatus(userIdFromPath)\r\n\r\n      } else {\r\n\r\n         if (this.props.isAuth && authorisedUserId) {\r\n            this.props.getUserProfile(authorisedUserId)\r\n            this.props.getStatus(authorisedUserId)\r\n         }\r\n      }\r\n   }\r\n\r\n   componentDidUpdate(prevProps: PropsType & LocalStateType, prevState: PropsType & LocalStateType) {\r\n\r\n      let userIdFromPath = +this.props.router.params.userId\r\n      let authorisedUserId = this.props.authorisedUserId\r\n      let isShowMyProfile = this.state.isShowMyProfile\r\n\r\n      if (isShowMyProfile) {\r\n\r\n         if (userIdFromPath === authorisedUserId) {\r\n            this.setState({isShowMyProfile: false})\r\n         }\r\n\r\n         if (!userIdFromPath && this.props.isAuth && authorisedUserId) {\r\n            this.props.getUserProfile(authorisedUserId)\r\n            this.props.getStatus(authorisedUserId)\r\n            this.setState({isShowMyProfile: false})\r\n         }\r\n      }\r\n   }\r\n\r\n\r\n   render() {\r\n\r\n      if (!this.props.isAuth && !this.props.router.params.userId) {\r\n         return <Navigate to={'/login'} />\r\n      }\r\n\r\n      let userIdFromPath = +this.props.router.params.userId\r\n      let authorisedUserId = this.props.authorisedUserId\r\n\r\n\r\n      let isOwner = false\r\n      if (!userIdFromPath && this.props.isAuth) {\r\n         isOwner = true\r\n      } else if (userIdFromPath === authorisedUserId) {\r\n         isOwner = true\r\n      }\r\n\r\n\r\n      return (\r\n         <div>\r\n            <Profile\r\n               profile={this.props.profile}\r\n               status={this.props.status}\r\n               updateStatus={this.props.updateStatus}\r\n               isOwner={isOwner}\r\n               savePhoto={this.props.savePhoto}\r\n               saveProfile={this.props.saveProfile}\r\n            />\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.Id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n}\r\n\r\nfunction withRouter(Component:any) {\r\n    function ComponentWithRouterProp(props:any) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile,getStatus,updateStatus,savePhoto,saveProfile}),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n"],"names":["props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","style","formSummeryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","src","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref3","savePhoto","saveProfile","Preloader","photos","large","userPhoto","_e$target$files","target","files","length","ProfileStatusWithHooks","ProfileDataForm","initialValues","formData","then","message","likesCount","required","MyPosts","postsElements","_toConsumableArray","posts","reverse","p","Post","id","AddPostForm","values","addPost","newPostText","React","connect","state","profilePage","actions","addPostActionCreator","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","isShowMyProfile","_createClass","userIdFromPath","this","router","params","userId","authorisedUserId","getUserProfile","getStatus","isAuth","prevProps","prevState","setState","Navigate","to","Profile","compose","auth","Id","Component","location","useLocation","navigate","useNavigate","useParams","_objectSpread"],"sourceRoot":""}