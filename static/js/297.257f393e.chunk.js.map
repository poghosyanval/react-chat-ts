{"version":3,"file":"static/js/297.257f393e.chunk.js","mappings":"4KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,SCc5I,EAPqC,SAACA,GACpC,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAOC,SACtBL,EAAMM,SAGb,E,UCME,EAXsC,SAACN,GACrC,IAAMO,EAAO,YAAcP,EAAMQ,GACjC,OACEP,EAAAA,EAAAA,KAAA,OAAKC,UAAS,GAAAO,OAAKN,EAAEC,OAAM,KAAAK,OAAIN,EAAEO,QAASL,UACxCM,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,GAAIN,EAAKF,SAAA,EAClBJ,EAAAA,EAAAA,KAAA,OAAKa,IAAI,sEACNd,EAAMe,SAIf,E,4BCdIC,GAAcC,EAAAA,EAAAA,GAAiB,IAgBrC,GAAeC,EAAAA,EAAAA,GAAoC,CAAEC,KAAM,wBAA3D,EAZqG,SAACnB,GAClG,OACIW,EAAAA,EAAAA,MAAA,QAAMS,SAAUpB,EAAMqB,aAAcC,MAAO,CAAEC,UAAW,QAASlB,SAAA,EAC7DJ,EAAAA,EAAAA,KAAA,OAAAI,UACKmB,EAAAA,EAAAA,IAA0C,qBAAsB,iBAAkB,CAACC,EAAAA,EAAUT,GAAcU,EAAAA,OAEhHzB,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,aAIxB,ICiBA,EArBqC,SAACL,GACpC,IAAI2B,EAAQ3B,EAAM4B,YACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI/B,EAAAA,EAAAA,KAACgC,EAAU,CAAClB,KAAMiB,EAAEjB,KAAiBP,GAAIwB,EAAExB,IAAZwB,EAAExB,GAAgB,IAC1F0B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAInC,EAAAA,EAAAA,KAACoC,EAAO,CAAC/B,QAAS8B,EAAE9B,SAAc8B,EAAE5B,GAAM,IAKzF,OACEG,EAAAA,EAAAA,MAAA,OAAKT,UAAWC,EAAE2B,QAAQzB,SAAA,EACxBJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEmC,aAAajC,SAC5BwB,KAEH5B,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEgC,SAAS9B,UACzBJ,EAAAA,EAAAA,KAAA,OAAAI,SAAM6B,OAERjC,EAAAA,EAAAA,KAACsC,EAAc,CAACnB,SAXA,SAACoB,GACnBxC,EAAMyC,YAAYD,EAAOE,eAC3B,MAYF,E,qDC7BIC,EAA6B,SAAChB,GAAmB,MAAM,CAC1DiB,OAAQjB,EAAMkB,KAAKD,OACnB,ECDD,IAMA,GAAeE,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAPoB,SAACpB,GACrB,MAAO,CACLC,YAAaD,EAAMC,YAEvB,IAGyBoB,EAAAA,EAAAA,GAAA,GAAMC,EAAAA,KDGxB,SAAgEC,GAetE,OAAOJ,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAA4DJ,EAA4B,CAAC,GAAjGG,EAd+D,SAAC9C,GACtE,IAAK4C,EAAwB5C,EAAxB4C,OAAWO,GAASC,EAAAA,EAAAA,GAAIpD,EAAKqD,GACjC,OAAGT,GACK3C,EAAAA,EAAAA,KAACiD,GAAgBF,EAAAA,EAAAA,GAAA,GAAKG,KACpBP,GAAWO,EAAUG,UAG1BV,GAAWO,EAAUG,OAAOC,OAAOC,SAGlCZ,GAAUO,EAAUG,OAAOC,OAAOC,QAAevD,EAAAA,EAAAA,KAACiD,GAAgBF,EAAAA,EAAAA,GAAA,GAAKG,SAA3E,GALMlD,EAAAA,EAAAA,KAACwD,EAAAA,GAAQ,CAAC5C,GAAG,UAQvB,GAED,GCpBA,CAGE6C,E","sources":["webpack://project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__xSnhA\",\"dialogsItems\":\"Dialogs_dialogsItems__qge3w\",\"active\":\"Dialogs_active__bO-4+\",\"messages\":\"Dialogs_messages__TEMB1\"};","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.dialog}>\r\n      {props.message}\r\n      </div>\r\n  )\r\n}\r\nexport default Message;","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n  id: number,\r\n  name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    const path = \"/dialogs/\" + props.id\r\n    return (\r\n      <div className={`${s.dialog} ${s.active}`}>\r\n        <NavLink to={path}>\r\n        <img src='https://cdn.landesa.org/wp-content/uploads/default-user-image.png' />\r\n          {props.name}\r\n          </NavLink>\r\n      </div>\r\n    )\r\n  }\r\n  export default DialogItem","import { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { maxLengthCreator, required } from \"../../../utils/validator/validators\"\r\nimport { Textarea, createField } from \"../../Common/FormsControls/FormControls\"\r\nimport { NewMessageFormValuesType } from \"../Dialogs\"\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} style={{ marginTop: \"10px\" }}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm<NewMessageFormValuesType>({ form: 'dialogAddMessageForm' })(AddMessageForm);","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport { InitialStateType } from '../../redux/dialogsReducer'\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\r\n\r\ntype PropsType = {\r\n  dialogsPage: InitialStateType,\r\n  sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n  newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n  let state = props.dialogsPage\r\n  let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n  let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n\r\n  let addNewMessage = (values: NewMessageFormValuesType) => {\r\n    props.sendMessage(values.newMessageBody)\r\n  }\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageForm onSubmit={addNewMessage} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../redux/reduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n\tisAuth: state.auth.isAuth\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n\tisAuth: boolean,\r\n\trouter: any\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes> (WrappedComponent: React.ComponentType<WCP>) {\r\n\tconst RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\t\tlet {isAuth, ...restProps} = props\r\n\t\t\tif(isAuth){\r\n\t\t\t\treturn <WrappedComponent {...restProps as unknown as WCP}/>\r\n\t\t\t}else if(!isAuth && !restProps.router){\r\n\t\t\t\treturn <Navigate to='/login'/>\r\n\t\t\t}else {\r\n\t\t\t\tif(!isAuth && !restProps.router.params.userId){\r\n\t\t\t\t\treturn <Navigate to='/login'/>\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(!isAuth && restProps.router.params.userId) return <WrappedComponent {...restProps as unknown as WCP}/>\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn compose(connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {}))((RedirectComponent));\r\n}","import { actions } from '../../redux/dialogsReducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/reduxStore'\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {...actions}),\r\n  withAuthRedirect\r\n)(Dialogs)"],"names":["props","_jsx","className","s","dialog","children","message","path","id","concat","active","_jsxs","NavLink","to","src","name","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","style","marginTop","createField","required","Textarea","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","dialogsItems","AddMessageForm","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","_objectSpread","actions","WrappedComponent","restProps","_objectWithoutProperties","_excluded","router","params","userId","Navigate","Dialogs"],"sourceRoot":""}